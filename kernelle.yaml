# ------------------------------------------------------------
# High level tasks
# ------------------------------------------------------------

# PR Pre-checks
checks:
  - do: checks-base
  - do: test

checks-full:
  - do: checks-base
  - do: coverage

# Other Useful Tasks
build:
  - do: rust-build
clean:
  - do: rust-clean
audit:
  - do: rust-audit
test:
  - do: rust-test
coverage:
  - do: rust-coverage
lint:
  - do: rust-lint
tidy:
  - do: lint
  - do: format
format:
  - do: rust-format
  - do: endlines
endlines: bash scripts/ensure-final-newlines.sh --fix

# ------------------------------------------------------------
# Pre-check Tasks
# ------------------------------------------------------------
# These subtasks will be used to orchestrate linting, formatting, and other checks for PRs
# Note: for now, these are mostly just aliases for rust tasks, but eventually python will be added to the mix

# Base pre-checks, built from other checks below
checks-base:
  - do: check-build
  - do: check-tidy

check-build:
  - do: clean
  - do: build
check-secure:
  - do: rust-audit
check-test:
  - do: rust-test
check-tidy:
  - do: check-lint
  - do: check-format
  - do: check-endlines
  - do: check-reading
check-reading:
  - violet .
check-lint:
  - do: rust-lint-assert
check-format:
  - do: rust-format-assert
check-endlines:
  - bash scripts/ensure-final-newlines.sh --check

# ------------------------------------------------------------
# Rust Tasks
# ------------------------------------------------------------

rust-lint:
  - cargo clippy --workspace --all-targets --fix --allow-dirty --allow-staged
rust-format:
  - cargo fmt --all
rust-lint-assert:
  - RUSTFLAGS="-D warnings" cargo clippy --workspace --all-targets
rust-format-assert:
  - cargo fmt --all -- --check
rust-build:
  - cargo build --release
rust-clean:
  - cargo clean
rust-build-clean:
  - do: rust-clean
  - do: rust-build
rust-audit:
  - cargo audit --deny warnings --deny unmaintained
rust-test:
  - cargo test --workspace
rust-coverage:
  - > 
    RUSTFLAGS='-C instrument-coverage' cargo tarpaulin 
    --workspace 
    --timeout 300 
    --out xml 
    --output-dir coverage 
    --jobs $(nproc) 
    --branch
    --config tarpaulin.toml 

