name: "Setup Blizz Dependencies"
description: "Sets up Rust toolchain, installs dependencies, and bootstraps Blizz CLI tools"

inputs:
  rust-components:
    description: "Additional Rust components to install (e.g., rustfmt, clippy)"
    required: false
    default: "rustfmt,clippy"
  skip-bootstrap:
    description: 'If "true", skip running the blizz bootstrap/install script and related caching/verification steps'
    required: false
    default: "false"

runs:
  using: "composite"
  steps:
    - name: Setup Rust
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable
        components: ${{ inputs.rust-components }}
        # Enable caching and cache on failure for better cache utilization
        cache: true
        cache-on-failure: true

    # Cache cargo registry and git dependencies
    - name: Cache Cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-

    # Cache ONNX Runtime binaries (large ML dependencies)
    - name: Cache ONNX Runtime binaries
      uses: actions/cache@v4
      with:
        path: |
          target/debug/libonnxruntime*.so
          target/debug/deps/libonnxruntime*.so
          target/release/libonnxruntime*.so  
          target/release/deps/libonnxruntime*.so
          ~/.cache/ort/
        key: ${{ runner.os }}-onnx-runtime-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-onnx-runtime-

    # Cache heavy ML/database dependencies separately for faster incremental builds
    - name: Cache heavy dependencies
      uses: actions/cache@v4
      with:
        path: |
          target/debug/deps/liblance*.rlib
          target/debug/deps/libdatafusion*.rlib
          target/debug/deps/libtantivy*.rlib
          target/debug/deps/libtokenizers*.rlib
          target/debug/deps/libhf_hub*.rlib
        key: ${{ runner.os }}-heavy-deps-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-heavy-deps-

    # Cache target directory (remaining artifacts)  
    - name: Cache Rust target directory
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-blizz-target-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-blizz-target-

    # Cache blizz bootstrap artifacts
    - name: Cache blizz bootstrap
      if: ${{ inputs.skip-bootstrap != 'true' }}
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/blizz
          ~/.cargo/bin/insights
          ~/.cargo/bin/violet
          ~/.cargo/bin/adam
          ~/.cargo/bin/secrets
          ~/.blizz
        key: ${{ runner.os }}-blizz-bootstrap-${{ hashFiles('crates/**/Cargo.toml', 'Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-blizz-bootstrap-

    - name: Install cargo-audit for security auditing
      run: cargo install cargo-audit --locked
      shell: bash

    - name: Install cargo-tarpaulin for coverage
      if: ${{ runner.os == 'Linux' }}
      run: cargo install cargo-tarpaulin --locked
      shell: bash

    - name: Install Protocol Buffers compiler (Linux)
      if: ${{ runner.os == 'Linux' }}
      run: |
        echo "Installing protobuf compiler via apt..."
        sudo apt-get update && sudo apt-get install -y protobuf-compiler
        
        echo "Verifying protoc installation..."
        which protoc
        protoc --version
        
        # Set PROTOC environment variable for build
        echo "PROTOC=$(which protoc)" >> $GITHUB_ENV
      shell: bash

    - name: Install Protocol Buffers compiler (macOS)
      if: ${{ runner.os == 'macOS' }}
      run: |
        echo "Installing protobuf via Homebrew..."
        brew update
        brew install protobuf
        
        echo "Verifying protoc installation..."
        which protoc
        protoc --version
        
        # Set PROTOC environment variable for build
        echo "PROTOC=$(which protoc)" >> $GITHUB_ENV
        
        # Add protoc to PATH if needed
        PROTOC_DIR=$(dirname $(which protoc))
        echo "PROTOC directory: $PROTOC_DIR"
        echo "$PROTOC_DIR" >> $GITHUB_PATH
      shell: bash

    - name: Bootstrap blizz
      if: ${{ inputs.skip-bootstrap != 'true' }}
      run: ./scripts/install.sh --non-interactive --from-source
      shell: bash

    - name: Add blizz to PATH (Unix)
      if: ${{ runner.os != 'Windows' && inputs.skip-bootstrap != 'true' }}
      run: echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      shell: bash

    - name: Add blizz to PATH (Windows)
      if: ${{ runner.os == 'Windows' && inputs.skip-bootstrap != 'true' }}
      run: echo "$env:USERPROFILE\.cargo\bin" >> $env:GITHUB_PATH
      shell: pwsh

    - name: Verify blizz installation
      if: ${{ inputs.skip-bootstrap != 'true' }}
      run: |
        blizz --help
        insights --help
        violet --help
      shell: bash
