name: 'Test with Optional Coverage'
description: 'Runs Blizz tests and optionally generates coverage reports with PR comments and badge updates'

inputs:
  report-coverage:
    description: 'Whether to generate coverage reports'
    required: false
    default: 'false'
  post-pr-comment:
    description: 'Whether to post coverage as PR comment (only effective when report-coverage is true)'
    required: false
    default: 'false'
  update-badge:
    description: 'Whether to update coverage badge in README (only effective when report-coverage is true and on push to dev)'
    required: false
    default: 'false'
  coverage-artifact-name:
    description: 'Name for the coverage artifact'
    required: false
    default: 'coverage'

runs:
  using: 'composite'
  steps:
    # Simple Case: Run tests without coverage
    - name: Run tests
      if: inputs.report-coverage != 'true'
      shell: bash
      run: blizz do test

    # Coverage Case: Run tests with coverage reporting
    - name: Run tests with coverage reporting (with cached binaries)
      if: inputs.report-coverage == 'true'
      shell: bash
      run: |
        # Try with cached binaries first, fall back to no-download mode if timeout
        if ! timeout 600s blizz do coverage-with-cache; then
          if [ $? -eq 124 ]; then
            echo "⚠️ Cached approach timed out, falling back to no-download mode"
            blizz do coverage
          else
            echo "❌ Coverage with cache failed with exit code $?"
            exit $?
          fi
        fi

    - name: Upload Coverage Reports
      if: inputs.report-coverage == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.coverage-artifact-name }}
        path: coverage/
        retention-days: 30
      
    - name: Generate coverage summary
      if: inputs.report-coverage == 'true'
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: coverage/cobertura.xml
        format: markdown
        output: both
        indicators: true
        badge: true

    - name: Post coverage as PR comment
      if: inputs.report-coverage == 'true' && inputs.post-pr-comment == 'true' && github.event_name == 'pull_request'
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        recreate: true
        path: code-coverage-results.md
        
    - name: Update coverage badge in README
      if: inputs.report-coverage == 'true' && inputs.update-badge == 'true' && github.ref == 'refs/heads/dev' && github.event_name == 'push'
      shell: bash
      run: |
        # Extract the badge line (first line) from the coverage results
        NEW_BADGE=$(head -n 1 code-coverage-results.md)
        
        # Replace the coverage badge line in README.md
        sed -i "s|^!\[Code Coverage\](https://img\.shields\.io/badge/.*|$NEW_BADGE|" README.md
        
        # Check if there were changes
        if git diff --quiet README.md; then
          echo "No changes to README.md"
        else
          echo "Coverage badge updated in README.md"
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md
          git commit -m "Update coverage badge [skip ci]"
          git push
        fi
