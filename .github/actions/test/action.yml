name: 'Test with Optional Coverage'
description: 'Runs Blizz tests and optionally generates coverage reports with PR comments and badge updates'

inputs:
  report-coverage:
    description: 'Whether to generate coverage reports'
    required: false
    default: 'false'
  post-pr-comment:
    description: 'Whether to post coverage as PR comment (only effective when report-coverage is true)'
    required: false
    default: 'false'
  update-badge:
    description: 'Whether to update coverage badge in README (only effective when report-coverage is true and on push to dev)'
    required: false
    default: 'false'
  coverage-artifact-name:
    description: 'Name for the coverage artifact'
    required: false
    default: 'coverage'

runs:
  using: 'composite'
  steps:
    # Simple Case: Run tests without coverage
    - name: Run tests
      if: inputs.report-coverage != 'true'
      shell: bash
      run: blizz do test

    # Heavy Test Case: Run tests with resource monitoring (coverage disabled for now)
    - name: Monitor system resources before test build
      if: inputs.report-coverage == 'true'
      shell: bash
      run: |
        echo "🔍 System resources before test build:"
        echo "Memory:"
        free -h
        echo "Disk usage:"
        df -h
        echo "CPU info:"
        nproc
        cat /proc/cpuinfo | grep "model name" | head -1
        echo "Load average:"
        uptime
    
    - name: Run tests (lightweight, no coverage)
      if: inputs.report-coverage == 'true'
      shell: bash
      env:
        # Reduce parallel compilation to avoid memory pressure and timeouts
        CARGO_BUILD_JOBS: 2
        RUSTFLAGS: '-C codegen-units=1'
      run: |
        echo "🔧 Running tests with reduced parallelism to prevent timeout..."
        
        # Start background resource monitoring
        (while true; do
          echo "$(date): Memory: $(free -h | grep Mem | awk '{print $3 "/" $2}')"
          echo "$(date): Load: $(uptime | awk -F'load average:' '{print $2}')"
          echo "$(date): Disk: $(df -h / | tail -1 | awk '{print $4 " available"}')"
          sleep 30
        done) &
        MONITOR_PID=$!
        
        # Run the actual test build (skip heavy coverage for now)
        blizz do test
        
        # Stop monitoring
        kill $MONITOR_PID 2>/dev/null || true
        
        echo "✅ Tests completed successfully"

    # Coverage steps disabled - using lightweight tests for CI
    # TODO: Re-enable coverage when memory issues are resolved
    
    # - name: Upload Coverage Reports
    #   if: inputs.report-coverage == 'true'
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: ${{ inputs.coverage-artifact-name }}
    #     path: coverage/
    #     retention-days: 30
    #   
    # - name: Generate coverage summary
    #   if: inputs.report-coverage == 'true'
    #   uses: irongut/CodeCoverageSummary@v1.3.0
    #   with:
    #     filename: coverage/cobertura.xml
    #     format: markdown
    #     output: both
    #     indicators: true
    #     badge: true
    #
    # - name: Post coverage as PR comment
    #   if: inputs.report-coverage == 'true' && inputs.post-pr-comment == 'true' && github.event_name == 'pull_request'
    #   uses: marocchino/sticky-pull-request-comment@v2
    #   with:
    #     recreate: true
    #     path: code-coverage-results.md
    #     
    # - name: Update coverage badge in README
    #   if: inputs.report-coverage == 'true' && inputs.update-badge == 'true' && github.ref == 'refs/heads/dev' && github.event_name == 'push'
    #   shell: bash
    #   run: |
    #     # Extract the badge line (first line) from the coverage results
    #     NEW_BADGE=$(head -n 1 code-coverage-results.md)
    #     
    #     # Replace the coverage badge line in README.md
    #     sed -i "s|^!\[Code Coverage\](https://img\.shields\.io/badge/.*|$NEW_BADGE|" README.md
    #     
    #     # Check if there were changes
    #     if git diff --quiet README.md; then
    #       echo "No changes to README.md"
    #     else
    #       echo "Coverage badge updated in README.md"
    #       git config --local user.email "action@github.com"
    #       git config --local user.name "GitHub Action"
    #       git add README.md
    #       git commit -m "Update coverage badge [skip ci]"
    #       git push
    #     fi
