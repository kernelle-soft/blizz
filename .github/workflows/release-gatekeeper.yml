name: release-check

on:
  workflow_run:
    workflows:
      - linux
      - mac-os
      - windows
      - code-quality
      - test-install-cleanup
      - test-updates
    types:
      - completed
    branches:
      - dev

jobs:
  check-all-workflows:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'
    outputs:
      should-release: ${{ steps.check.outputs.should-release }}

    steps:
      - name: Check if all workflows succeeded
        id: check
        uses: actions/github-script@v7
        with:
          script: |
            // Get all workflows in the repository
            const { data: allWorkflows } = await github.rest.actions.listRepoWorkflows({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            
            // Filter out release-gatekeeper workflow, disabled workflows, Dependabot, and Copilot
            const workflows = allWorkflows.workflows
              .filter(wf => 
                wf.name !== 'release' && 
                wf.state === 'active' &&
                !wf.name.toLowerCase().includes('dependabot') &&
                !wf.name.toLowerCase().includes('copilot')
              )
              .map(wf => wf.name);
              
            console.log('Required workflows for release:', workflows);
            
            // Get ALL workflow runs for this commit (both completed and in-progress)
            const { data: runs } = await github.rest.actions.listWorkflowRunsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head_sha: context.payload.workflow_run.head_sha
            });

            const workflowResults = {};
            const workflowStatuses = {};
            
            for (const run of runs.workflow_runs) {
              if (workflows.includes(run.name)) {
                workflowResults[run.name] = run.conclusion;
                workflowStatuses[run.name] = run.status;
              }
            }

            console.log('Workflow results:', workflowResults);
            console.log('Workflow statuses:', workflowStatuses);

            // Check that ALL workflows exist, are completed, and succeeded
            const allCompleted = workflows.every(name => 
              workflowStatuses[name] === 'completed'
            );
            
            const allSucceeded = workflows.every(name => 
              workflowResults[name] === 'success'
            );

            if (allCompleted && allSucceeded) {
              core.setOutput('should-release', 'true');
            } else {
              const pending = workflows.filter(name => workflowStatuses[name] !== 'completed');
              const failed = workflows.filter(name => workflowResults[name] !== 'success' && workflowStatuses[name] === 'completed');
              
              if (pending.length > 0) console.log('  Still running:', pending.join(', '));
              if (failed.length > 0) console.log('  Failed:', failed.join(', '));
              
              core.setOutput('should-release', 'false');
            }

  create-release:
    name: Create Release and Tag
    needs: check-all-workflows
    if: needs.check-all-workflows.outputs.should-release == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Blizz Dependencies
        uses: ./.github/actions/setup-blizz
        with:
          # Skip the slow bootstrapping step. Not needed for release
          skip-bootstrap: "true"

      - name: Configure Git
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"

      - name: Bump and Tag Version
        run: |
          # Get current version from Cargo.toml
          CURRENT_VERSION=$(grep -A 10 '^\[workspace\.package\]' Cargo.toml | grep '^version = ' | sed 's/version = "//' | sed 's/"//' | tr -d ' \t\r\n')
          echo "üì¶ Current version: $CURRENT_VERSION"

          # Find the git tag for current version
          CURRENT_TAG="v$CURRENT_VERSION"

          # Get all commits since the current version tag (or all commits if no tag exists)
          if git rev-parse "$CURRENT_TAG" >/dev/null 2>&1; then
            echo "üîç Looking for version bump instructions since $CURRENT_TAG"
            COMMIT_RANGE="$CURRENT_TAG..HEAD"
          else
            echo "üîç No current version tag found, checking all commits"
            COMMIT_RANGE="HEAD"
          fi

          # Get all commit messages in range
          COMMIT_MSGS=$(git log --pretty=%B $COMMIT_RANGE)
          echo "Commits since last version:"
          echo "$COMMIT_MSGS"

          # Check for version bump instructions (major takes precedence over minor)
          if [[ "$COMMIT_MSGS" =~ \[bump:major\] ]]; then
            echo "Major version bump requested"
            BUMP_TYPE="major"
          elif [[ "$COMMIT_MSGS" =~ \[bump:minor\] ]]; then
            echo "Minor version bump requested"
            BUMP_TYPE="minor"
          else
            echo "Patch version bump (default)"
            BUMP_TYPE="patch"
          fi

          .github/run/bump-version.sh "$BUMP_TYPE"
          .github/run/tag-version.sh

      - name: Push Changes
        run: |
          git push origin dev
          # Push the newly created tag (if any) to trigger release workflow
          NEW_TAG=$(git describe --tags --exact-match HEAD 2>/dev/null || echo "")
          if [ ! -z "$NEW_TAG" ]; then
            echo "üè∑Ô∏è Pushing tag: $NEW_TAG"
            git push origin "$NEW_TAG"
          else
            echo "‚ÑπÔ∏è No tag found on current commit"
          fi

      - name: Get Release Version
        id: version
        run: |
          # Get the tag that was just created
          NEW_TAG=$(git describe --tags --exact-match HEAD 2>/dev/null || echo "")
          if [ ! -z "$NEW_TAG" ]; then
            echo "tag=$NEW_TAG" >> $GITHUB_OUTPUT
            echo "version=${NEW_TAG#v}" >> $GITHUB_OUTPUT
          else
            echo "‚ùå No tag found on current commit"
            exit 1
          fi

      - name: Verify Release Version Matches Cargo.toml
        run: .github/run/assert-version-match.sh \
          "${{ steps.version.outputs.version }}"

      - name: Generate Release Notes
        run: .github/run/create-release-notes.sh \
          "${{ steps.version.outputs.tag }}" \
          "${{ steps.version.outputs.version }}"

      - name: Create Draft GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: Blizz ${{ steps.version.outputs.version }}
          body_path: release_notes.md
          draft: true
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify about draft release
        run: |
          echo "‚úÖ Version bumped! Draft GitHub release created: ${{ steps.version.outputs.tag }}"
          echo "Now building binaries..."

    outputs:
      release-tag: ${{ steps.version.outputs.tag }}
      release-version: ${{ steps.version.outputs.version }}

  build-binaries:
    name: Build Release Binaries
    needs: create-release
    # Using default 6-hour timeout - issue is likely resource limits, not time
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact-name: blizz-linux-x86_64
            platform-name: "Linux x86_64"
          - os: macos-15
            target: aarch64-apple-darwin  
            artifact-name: blizz-macos-aarch64
            platform-name: "macOS ARM64 (15+)"

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          ref: ${{ needs.create-release.outputs.release-tag }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: release-full-features-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          cache-on-failure: true

      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          sudo apt install -y libssl-dev pkg-config protobuf-compiler

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install protobuf

      - name: Monitor system resources before build (Linux)
        if: runner.os == 'Linux'
        run: |
          echo "üîç System resources before build:"
          echo "Memory:"
          free -h
          echo "Disk usage:"
          df -h
          echo "CPU info:"
          nproc
          cat /proc/cpuinfo | grep "model name" | head -1
          echo "Load average:"
          uptime

      - name: Monitor system resources before build (macOS)
        if: runner.os == 'macOS'
        run: |
          echo "üîç System resources before build:"
          echo "Memory:"
          vm_stat | head -20
          echo "Disk usage:"
          df -h
          echo "CPU info:"
          sysctl -n hw.ncpu
          sysctl -n machdep.cpu.brand_string
          echo "Load average:"
          uptime

      - name: Build release binaries (with full ML features)
        env:
          # Reduce parallel compilation to avoid memory pressure
          CARGO_BUILD_JOBS: 2  # Even more conservative
          RUSTFLAGS: '-C codegen-units=1'
        shell: bash
        run: |
          echo "üöÄ Starting build with resource monitoring..."
          
          # Start background resource monitoring (OS-specific)
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            (while true; do
              echo "$(date): Memory: $(free -h | grep Mem | awk '{print $3 "/" $2}')"
              echo "$(date): Load: $(uptime | awk -F'load average:' '{print $2}')"
              sleep 30
            done) &
          else
            (while true; do
              echo "$(date): Memory: $(vm_stat | grep 'Pages active' || echo 'N/A')"
              echo "$(date): Load: $(uptime | awk -F'load average:' '{print $2}' || echo 'N/A')"
              sleep 30
            done) &
          fi
          MONITOR_PID=$!
          
          # Run the actual build
          cargo build --workspace --release --target ${{ matrix.target }} --all-features
          
          # Stop monitoring
          kill $MONITOR_PID 2>/dev/null || true
          
          echo "‚úÖ Build completed successfully"

      - name: Prepare binary package
        shell: bash
        run: |
          echo "üì¶ Packaging binaries for ${{ matrix.platform-name }}..."
          
          # Create distribution directory
          mkdir -p dist
          
          # Define binary names (without .exe extension)
          BINARIES=(
            "blizz"
            "insights"
            "insights_server"
            "install_insights_cuda_dependencies"
            "secrets"
            "keeper"
            "violet"
          )
          
          # Copy binaries to dist directory
          TARGET_DIR="target/${{ matrix.target }}/release"
          for binary in "${BINARIES[@]}"; do
            if [ -f "$TARGET_DIR/$binary" ]; then
              cp "$TARGET_DIR/$binary" dist/
              echo "‚úÖ Packaged: $binary"
            else
              echo "‚ö†Ô∏è  Binary not found: $binary"
            fi
          done
          
          # Verify we have at least some binaries
          BINARY_COUNT=$(ls -1 dist/ | wc -l)
          if [ "$BINARY_COUNT" -eq 0 ]; then
            echo "‚ùå No binaries found to package!"
            exit 1
          fi
          
          echo "üìã Packaged $BINARY_COUNT binaries"
          ls -la dist/

      - name: Create release archive
        shell: bash
        run: |
          cd dist
          tar -czf ../blizz-${{ matrix.target }}.tar.gz *

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: blizz-${{ matrix.target }}.tar.gz
          retention-days: 30

  publish-release:
    name: Publish Release with Binaries
    needs: [create-release, build-binaries]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Display downloaded artifacts
        run: |
          echo "üì¶ Downloaded artifacts:"
          find artifacts/ -type f -name "*.tar.gz" | sort
          
      - name: Verify all binaries present
        run: |
          echo "üîç Verifying all expected binaries were built..."
          
          # List the binaries we expect to have
          EXPECTED_BINARIES=(
            "blizz-x86_64-unknown-linux-gnu.tar.gz"
            "blizz-aarch64-apple-darwin.tar.gz"
          )
          
          # Check that all artifact files exist
          ALL_FOUND=true
          for binary in "${EXPECTED_BINARIES[@]}"; do
            if find artifacts/ -name "*$binary" -type f | grep -q .; then
              echo "‚úÖ Found: $binary"
            else
              echo "‚ùå Missing: $binary"
              ALL_FOUND=false
            fi
          done
          
          if [ "$ALL_FOUND" = "false" ]; then
            echo "‚ùå Not all expected binaries were found!"
            exit 1
          fi
          
          echo "‚úÖ All expected binaries confirmed present"

      - name: Attach binaries and publish release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.create-release.outputs.release-tag }}
          files: |
            artifacts/blizz-linux-x86_64/blizz-x86_64-unknown-linux-gnu.tar.gz
            artifacts/blizz-macos-aarch64/blizz-aarch64-apple-darwin.tar.gz
          draft: false
          append_body: true
          body: |
            
            ## üì¶ Pre-built Binaries Available
            
            This release includes pre-built binaries for:
            - **Linux x86_64** (`blizz-x86_64-unknown-linux-gnu.tar.gz`) - Compatible with Ubuntu, Debian, and most Linux distributions
            - **macOS ARM64** (`blizz-aarch64-apple-darwin.tar.gz`) - For Apple Silicon Macs
            
            Each archive contains all Blizz binaries: `blizz`, `insights`, `secrets`, `keeper`, `violet`, and support tools.
            
            üí° **Tip**: The install script will automatically detect your platform and use these pre-built binaries for faster installation!
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Release Summary
        run: |
          echo "üéâ Release published successfully!"
          echo "üéØ Tag: ${{ needs.create-release.outputs.release-tag }}"
          echo "üì¶ Platform binaries attached and release published"
          echo "üöÄ Release is now live!"
