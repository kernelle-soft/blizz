name: release

on:
  workflow_run:
    workflows:
      - linux
      - mac-os
      - windows
      - code-quality
      - test-install-cleanup
      - test-updates
    types:
      - completed
    branches:
      - dev

jobs:
  check-all-workflows:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'
    outputs:
      should-release: ${{ steps.check.outputs.should-release }}

    steps:
      - name: Check if all workflows succeeded
        id: check
        uses: actions/github-script@v7
        with:
          script: |
            const workflows = ["linux", "mac-os", "windows", "code-quality", "test-install-cleanup", "test-updates"];
            const { data: runs } = await github.rest.actions.listWorkflowRunsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head_sha: context.payload.workflow_run.head_sha,
              status: 'completed'
            });

            const workflowResults = {};
            for (const run of runs.workflow_runs) {
              if (workflows.includes(run.name)) {
                workflowResults[run.name] = run.conclusion;
              }
            }

            console.log('Workflow results:', workflowResults);

            const allSucceeded = workflows.every(name => 
              workflowResults[name] === 'success'
            );

            if (allSucceeded) {
              console.log('All workflows succeeded! Ready for release.');
              core.setOutput('should-release', 'true');
            } else {
              console.log('Not all workflows have succeeded yet.');
              core.setOutput('should-release', 'false');
            }

  trigger-release:
    needs: check-all-workflows
    runs-on: ubuntu-latest
    if: needs.check-all-workflows.outputs.should-release == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Kernelle Dependencies
        uses: ./.github/actions/setup-kernelle
        with:
          # Skip the slow bootstrapping step. Not needed for release
          skip-bootstrap: "true"

      - name: Configure Git
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"

      - name: Bump and Tag Version
        run: |
          .github/run/bump-version.sh patch
          .github/run/tag-version.sh

      - name: Push Changes
        run: |
          git push origin dev
          # Push the newly created tag (if any) to trigger release workflow
          NEW_TAG=$(git describe --tags --exact-match HEAD 2>/dev/null || echo "")
          if [ ! -z "$NEW_TAG" ]; then
            echo "üè∑Ô∏è Pushing tag: $NEW_TAG"
            git push origin "$NEW_TAG"
          else
            echo "‚ÑπÔ∏è No tag found on current commit"
          fi

      - name: Get Release Version
        id: version
        run: |
          # Get the tag that was just created
          NEW_TAG=$(git describe --tags --exact-match HEAD 2>/dev/null || echo "")
          if [ ! -z "$NEW_TAG" ]; then
            echo "tag=$NEW_TAG" >> $GITHUB_OUTPUT
            echo "version=${NEW_TAG#v}" >> $GITHUB_OUTPUT
          else
            echo "‚ùå No tag found on current commit"
            exit 1
          fi

      - name: Verify Release Version Matches Cargo.toml
        run: .github/run/assert-version-match.sh \
          "${{ steps.version.outputs.version }}"

      - name: Generate Release Notes
        run: .github/run/create-release-notes.sh \
          "${{ steps.version.outputs.tag }}" \
          "${{ steps.version.outputs.version }}"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: Kernelle ${{ steps.version.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
