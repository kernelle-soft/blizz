name: release

on:
  workflow_run:
    workflows:
      - linux
      - mac-os
      - windows
      - code-quality
      - test-install-cleanup
      - test-updates
    types:
      - completed
    branches:
      - dev

jobs:
  check-all-workflows:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'
    outputs:
      should-release: ${{ steps.check.outputs.should-release }}

    steps:
      - name: Check if all workflows succeeded
        id: check
        uses: actions/github-script@v7
        with:
          script: |
            const workflows = ["linux", "mac-os", "windows", "code-quality", "test-install-cleanup", "test-updates"];
            const { data: runs } = await github.rest.actions.listWorkflowRunsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head_sha: context.payload.workflow_run.head_sha,
              status: 'completed'
            });

            const workflowResults = {};
            for (const run of runs.workflow_runs) {
              if (workflows.includes(run.name)) {
                workflowResults[run.name] = run.conclusion;
              }
            }

            console.log('Workflow results:', workflowResults);

            const allSucceeded = workflows.every(name => 
              workflowResults[name] === 'success'
            );

            if (allSucceeded) {
              console.log('All workflows succeeded! Ready for release.');
              core.setOutput('should-release', 'true');
            } else {
              console.log('Not all workflows have succeeded yet.');
              core.setOutput('should-release', 'false');
            }

  trigger-release:
    needs: check-all-workflows
    runs-on: ubuntu-latest
    if: needs.check-all-workflows.outputs.should-release == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Kernelle Dependencies
        uses: ./.github/actions/setup-kernelle
        with:
          # Skip the slow bootstrapping step. Not needed for release
          skip-bootstrap: "true"

      - name: Configure Git
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"

      - name: Bump and Tag Version
        run: |
          .github/run/bump-version.sh patch
          .github/run/tag-version.sh

      - name: Push Changes
        run: |
          git push origin dev
          # Push the newly created tag (if any) to trigger release workflow
          NEW_TAG=$(git describe --tags --exact-match HEAD 2>/dev/null || echo "")
          if [ ! -z "$NEW_TAG" ]; then
            echo "üè∑Ô∏è Pushing tag: $NEW_TAG"
            git push origin "$NEW_TAG"
          else
            echo "‚ÑπÔ∏è No tag found on current commit"
          fi

      - name: Get Release Version
        id: version
        run: |
          # Get the tag that was just created
          NEW_TAG=$(git describe --tags --exact-match HEAD 2>/dev/null || echo "")
          if [ ! -z "$NEW_TAG" ]; then
            echo "tag=$NEW_TAG" >> $GITHUB_OUTPUT
            echo "version=${NEW_TAG#v}" >> $GITHUB_OUTPUT
          else
            echo "‚ùå No tag found on current commit"
            exit 1
          fi

      - name: Verify Release Version Matches Cargo.toml
        run: .github/run/assert-version-match.sh \
          "${{ steps.version.outputs.version }}"

      - name: Generate Release Notes
        run: .github/run/create-release-notes.sh \
          "${{ steps.version.outputs.tag }}" \
          "${{ steps.version.outputs.version }}"

      - name: Create Draft GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: Kernelle ${{ steps.version.outputs.version }}
          body_path: release_notes.md
          draft: true
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify about draft release
        run: |
          echo "Draft GitHub release created: ${{ steps.version.outputs.tag }}"
          echo "Now building cross-platform binaries..."

    outputs:
      release-tag: ${{ steps.version.outputs.tag }}
      release-version: ${{ steps.version.outputs.version }}

  build-binaries:
    name: Build Release Binaries
    needs: trigger-release
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact-name: kernelle-linux-x86_64
            platform-name: "Linux x86_64"
          - os: macos-15
            target: aarch64-apple-darwin  
            artifact-name: kernelle-macos-aarch64
            platform-name: "macOS ARM64 (15+)"

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: release-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          cache-on-failure: true

      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          sudo apt install -y libssl-dev pkg-config

      - name: Build release binaries
        run: cargo build --workspace --release --target ${{ matrix.target }}

      - name: Prepare binary package
        shell: bash
        run: |
          echo "üì¶ Packaging binaries for ${{ matrix.platform-name }}..."
          
          # Create distribution directory
          mkdir -p dist
          
          # Define binary names (without .exe extension)
          BINARIES=(
            "kernelle"
            "insights" 
            "insights_embedding_daemon"
            "install_insights_cuda_dependencies"
            "secrets"
            "keeper"
            "violet"
            "adam"
          )
          
          # Copy binaries to dist directory
          TARGET_DIR="target/${{ matrix.target }}/release"
          for binary in "${BINARIES[@]}"; do
            if [ -f "$TARGET_DIR/$binary" ]; then
              cp "$TARGET_DIR/$binary" dist/
              echo "‚úÖ Packaged: $binary"
            else
              echo "‚ö†Ô∏è  Binary not found: $binary"
            fi
          done
          
          # Verify we have at least some binaries
          BINARY_COUNT=$(ls -1 dist/ | wc -l)
          if [ "$BINARY_COUNT" -eq 0 ]; then
            echo "‚ùå No binaries found to package!"
            exit 1
          fi
          
          echo "üìã Packaged $BINARY_COUNT binaries"
          ls -la dist/

      - name: Create release archive
        shell: bash
        run: |
          cd dist
          tar -czf ../kernelle-${{ matrix.target }}.tar.gz *

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: kernelle-${{ matrix.target }}.tar.gz
          retention-days: 30

  publish-release:
    name: Publish Release with Binaries
    needs: [trigger-release, build-binaries]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Display downloaded artifacts
        run: |
          echo "üì¶ Downloaded artifacts:"
          find artifacts/ -type f -name "*.tar.gz" | sort
          
      - name: Verify all binaries present
        run: |
          echo "üîç Verifying all expected binaries were built..."
          
          # List the binaries we expect to have
          EXPECTED_BINARIES=(
            "kernelle-x86_64-unknown-linux-gnu.tar.gz"
            "kernelle-aarch64-apple-darwin.tar.gz"
          )
          
          # Check that all artifact files exist
          ALL_FOUND=true
          for binary in "${EXPECTED_BINARIES[@]}"; do
            if find artifacts/ -name "*$binary" -type f | grep -q .; then
              echo "‚úÖ Found: $binary"
            else
              echo "‚ùå Missing: $binary"
              ALL_FOUND=false
            fi
          done
          
          if [ "$ALL_FOUND" = "false" ]; then
            echo "‚ùå Not all expected binaries were found!"
            exit 1
          fi
          
          echo "‚úÖ All expected binaries confirmed present"

      - name: Attach binaries and publish release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.trigger-release.outputs.release-tag }}
          files: |
            artifacts/kernelle-linux-x86_64/kernelle-x86_64-unknown-linux-gnu.tar.gz
            artifacts/kernelle-macos-aarch64/kernelle-aarch64-apple-darwin.tar.gz
          draft: false
          append_body: true
          body: |
            
            ## üì¶ Pre-built Binaries Available
            
            This release includes pre-built binaries for:
            - **Linux x86_64** (`kernelle-x86_64-unknown-linux-gnu.tar.gz`) - Compatible with Ubuntu, Debian, and most Linux distributions
            - **macOS ARM64** (`kernelle-aarch64-apple-darwin.tar.gz`) - For Apple Silicon Macs
            
            Each archive contains all Kernelle binaries: `kernelle`, `insights`, `secrets`, `keeper`, `violet`, `adam`, and support tools.
            
            üí° **Tip**: The install script will automatically detect your platform and use these pre-built binaries for faster installation!
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Release Summary
        run: |
          echo "üéâ Release published successfully!"
          echo "üéØ Tag: ${{ needs.trigger-release.outputs.release-tag }}"
          echo "üì¶ Platform binaries attached and release published"
          echo "üöÄ Release is now live!"
